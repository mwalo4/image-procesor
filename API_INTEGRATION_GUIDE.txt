===============================================================================
                    UNIVERSAL IMAGE PROCESSOR API - INTEGRACE
===============================================================================

üéØ C√çL: Integrovat Railway API do va≈°√≠ React aplikace

üì° API URL: https://web-production-dcb78.up.railway.app
üîë Status: ‚úÖ AKTIVN√ç a funkƒçn√≠

===============================================================================
                                KROK 1: REACT KOMPONENTA
===============================================================================

1. Vytvo≈ôte soubor `ImageProcessor.jsx` ve va≈°√≠ React aplikaci:

```jsx
import React, { useState, useRef } from 'react';
import './ImageProcessor.css';

const ImageProcessor = () => {
  const [files, setFiles] = useState([]);
  const [processedImages, setProcessedImages] = useState([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [config, setConfig] = useState({
    target_width: 1000,
    target_height: 1000,
    quality: 95,
    background_color: '#F3F3F3',
    product_size_ratio: 0.75,
    auto_upscale: false
  });
  const [apiStatus, setApiStatus] = useState('unknown');
  const fileInputRef = useRef(null);

  // üöÄ D≈ÆLE≈ΩIT√â: Zde je va≈°e Railway API URL
  const API_BASE_URL = 'https://web-production-dcb78.up.railway.app/api';

  // Kontrola API
  const checkApiHealth = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/health`);
      const data = await response.json();
      setApiStatus(data.status === 'ok' ? 'connected' : 'error');
      return data.status === 'ok';
    } catch (error) {
      setApiStatus('error');
      return false;
    }
  };

  // Zpracov√°n√≠ jednoho obr√°zku
  const processSingleImage = async (file) => {
    const formData = new FormData();
    formData.append('image', file);
    formData.append('config', JSON.stringify(config));

    try {
      const response = await fetch(`${API_BASE_URL}/process-single`, {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const blob = await response.blob();
      const url = URL.createObjectURL(blob);
      
      return {
        originalName: file.name,
        processedUrl: url,
        processedBlob: blob
      };
    } catch (error) {
      console.error('Chyba p≈ôi zpracov√°n√≠ obr√°zku:', error);
      throw error;
    }
  };

  // Zpracov√°n√≠ v√≠ce obr√°zk≈Ø
  const processBatchImages = async () => {
    if (files.length === 0) return;

    setIsProcessing(true);

    try {
      if (files.length > 1) {
        // Batch processing
        const formData = new FormData();
        files.forEach(file => {
          formData.append('images', file);
        });
        formData.append('config', JSON.stringify(config));

        const response = await fetch(`${API_BASE_URL}/process-batch`, {
          method: 'POST',
          body: formData,
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const blob = await response.blob();
        const url = URL.createObjectURL(blob);
        
        // St√°hnut√≠ ZIP souboru
        const link = document.createElement('a');
        link.href = url;
        link.download = 'processed_images.zip';
        link.click();
        
        setProcessedImages([]);
      } else {
        // Single image processing
        const result = await processSingleImage(files[0]);
        setProcessedImages([result]);
      }
    } catch (error) {
      console.error('Chyba p≈ôi zpracov√°n√≠:', error);
      alert('Chyba p≈ôi zpracov√°n√≠ obr√°zk≈Ø: ' + error.message);
    } finally {
      setIsProcessing(false);
    }
  };

  // Drag & drop handlers
  const handleDragOver = (e) => {
    e.preventDefault();
  };

  const handleDrop = async (e) => {
    e.preventDefault();
    const droppedFiles = Array.from(e.dataTransfer.files);
    const imageFiles = droppedFiles.filter(file => 
      file.type.startsWith('image/')
    );
    
    if (imageFiles.length > 0) {
      setFiles(imageFiles);
    }
  };

  // Inicializace p≈ôi naƒçten√≠ komponenty
  React.useEffect(() => {
    checkApiHealth();
  }, []);

  return (
    <div className="image-processor">
      <div className="header">
        <h1>üñºÔ∏è Universal Image Processor</h1>
        <div className={`api-status ${apiStatus}`}>
          API Status: {apiStatus === 'connected' ? 'üü¢ P≈ôipojeno' : 
                      apiStatus === 'error' ? 'üî¥ Chyba p≈ôipojen√≠' : 'üü° Kontroluji...'}
        </div>
      </div>

      <div className="config-section">
        <h3>‚öôÔ∏è Konfigurace</h3>
        <div className="config-grid">
          <div className="config-item">
            <label>≈†√≠≈ôka (px):</label>
            <input
              type="number"
              value={config.target_width}
              onChange={(e) => setConfig({...config, target_width: parseInt(e.target.value)})}
            />
          </div>
          <div className="config-item">
            <label>V√Ω≈°ka (px):</label>
            <input
              type="number"
              value={config.target_height}
              onChange={(e) => setConfig({...config, target_height: parseInt(e.target.value)})}
            />
          </div>
          <div className="config-item">
            <label>Kvalita (%):</label>
            <input
              type="number"
              min="1"
              max="100"
              value={config.quality}
              onChange={(e) => setConfig({...config, quality: parseInt(e.target.value)})}
            />
          </div>
          <div className="config-item">
            <label>Barva pozad√≠:</label>
            <input
              type="color"
              value={config.background_color}
              onChange={(e) => setConfig({...config, background_color: e.target.value})}
            />
          </div>
          <div className="config-item">
            <label>Velikost produktu (%):</label>
            <input
              type="number"
              min="0.1"
              max="1"
              step="0.1"
              value={config.product_size_ratio}
              onChange={(e) => setConfig({...config, product_size_ratio: parseFloat(e.target.value)})}
            />
          </div>
          <div className="config-item">
            <label>
              <input
                type="checkbox"
                checked={config.auto_upscale}
                onChange={(e) => setConfig({...config, auto_upscale: e.target.checked})}
              />
              Automatick√Ω upscale
            </label>
          </div>
        </div>
      </div>

      <div className="upload-section">
        <div
          className="drop-zone"
          onDragOver={handleDragOver}
          onDrop={handleDrop}
          onClick={() => fileInputRef.current?.click()}
        >
          <div className="drop-zone-content">
            <div className="upload-icon">üìÅ</div>
            <p>P≈ôet√°hnƒõte obr√°zky sem nebo kliknƒõte pro v√Ωbƒõr</p>
            <p className="file-info">
              {files.length > 0 ? `Vybr√°no: ${files.length} soubor≈Ø` : 'Podporovan√© form√°ty: JPG, PNG, BMP, TIFF, WebP'}
            </p>
          </div>
        </div>
        
        <input
          ref={fileInputRef}
          type="file"
          multiple
          accept="image/*"
          onChange={(e) => setFiles(Array.from(e.target.files))}
          style={{ display: 'none' }}
        />
      </div>

      {files.length > 0 && (
        <div className="files-section">
          <h3>üìã Vybran√© soubory ({files.length})</h3>
          <div className="files-list">
            {files.map((file, index) => (
              <div key={index} className="file-item">
                <span>{file.name}</span>
                <span className="file-size">({(file.size / 1024).toFixed(1)} KB)</span>
              </div>
            ))}
          </div>
          
          <button
            className="process-button"
            onClick={processBatchImages}
            disabled={isProcessing || apiStatus !== 'connected'}
          >
            {isProcessing ? 'üîÑ Zpracov√°v√°m...' : 'üöÄ Zpracovat obr√°zky'}
          </button>
        </div>
      )}

      {processedImages.length > 0 && (
        <div className="results-section">
          <h3>‚úÖ Zpracovan√© obr√°zky</h3>
          <div className="processed-images">
            {processedImages.map((image, index) => (
              <div key={index} className="processed-image">
                <img src={image.processedUrl} alt="Zpracovan√Ω obr√°zek" />
                <div className="image-actions">
                  <button onClick={() => {
                    const link = document.createElement('a');
                    link.href = image.processedUrl;
                    link.download = `processed_${image.originalName}`;
                    link.click();
                  }}>
                    üíæ St√°hnout
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default ImageProcessor;
```

===============================================================================
                                KROK 2: CSS STYLY
===============================================================================

2. Vytvo≈ôte soubor `ImageProcessor.css`:

```css
.image-processor {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

.header {
  text-align: center;
  margin-bottom: 30px;
  padding: 20px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border-radius: 15px;
  box-shadow: 0 10px 30px rgba(0,0,0,0.1);
}

.header h1 {
  margin: 0 0 10px 0;
  font-size: 2.5rem;
  font-weight: 700;
}

.api-status {
  display: inline-block;
  padding: 8px 16px;
  border-radius: 20px;
  font-weight: 500;
  font-size: 0.9rem;
}

.api-status.connected {
  background: rgba(34, 197, 94, 0.2);
  color: #22c55e;
  border: 1px solid rgba(34, 197, 94, 0.3);
}

.api-status.error {
  background: rgba(239, 68, 68, 0.2);
  color: #ef4444;
  border: 1px solid rgba(239, 68, 68, 0.3);
}

.api-status.unknown {
  background: rgba(245, 158, 11, 0.2);
  color: #f59e0b;
  border: 1px solid rgba(245, 158, 11, 0.3);
}

.config-section {
  background: white;
  padding: 25px;
  border-radius: 15px;
  box-shadow: 0 5px 15px rgba(0,0,0,0.08);
  margin-bottom: 30px;
}

.config-section h3 {
  margin: 0 0 20px 0;
  color: #374151;
  font-size: 1.3rem;
}

.config-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 20px;
}

.config-item {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.config-item label {
  font-weight: 500;
  color: #4b5563;
  font-size: 0.9rem;
}

.config-item input[type="number"],
.config-item input[type="color"] {
  padding: 10px;
  border: 2px solid #e5e7eb;
  border-radius: 8px;
  font-size: 1rem;
  transition: border-color 0.2s;
}

.config-item input[type="number"]:focus,
.config-item input[type="color"]:focus {
  outline: none;
  border-color: #667eea;
}

.config-item input[type="checkbox"] {
  margin-right: 8px;
  transform: scale(1.2);
}

.upload-section {
  margin-bottom: 30px;
}

.drop-zone {
  border: 3px dashed #d1d5db;
  border-radius: 15px;
  padding: 60px 20px;
  text-align: center;
  cursor: pointer;
  transition: all 0.3s ease;
  background: #f9fafb;
}

.drop-zone:hover {
  border-color: #667eea;
  background: #f0f4ff;
  transform: translateY(-2px);
}

.drop-zone-content {
  pointer-events: none;
}

.upload-icon {
  font-size: 3rem;
  margin-bottom: 15px;
  opacity: 0.7;
}

.drop-zone p {
  margin: 10px 0;
  color: #6b7280;
  font-size: 1.1rem;
}

.file-info {
  font-size: 0.9rem !important;
  color: #9ca3af !important;
}

.files-section {
  background: white;
  padding: 25px;
  border-radius: 15px;
  box-shadow: 0 5px 15px rgba(0,0,0,0.08);
  margin-bottom: 30px;
}

.files-section h3 {
  margin: 0 0 20px 0;
  color: #374151;
  font-size: 1.3rem;
}

.files-list {
  max-height: 200px;
  overflow-y: auto;
  margin-bottom: 20px;
  border: 1px solid #e5e7eb;
  border-radius: 8px;
  padding: 10px;
}

.file-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px;
  border-bottom: 1px solid #f3f4f6;
  font-size: 0.9rem;
}

.file-item:last-child {
  border-bottom: none;
}

.file-size {
  color: #6b7280;
  font-size: 0.8rem;
}

.process-button {
  width: 100%;
  padding: 15px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border: none;
  border-radius: 10px;
  font-size: 1.1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
}

.process-button:hover:not(:disabled) {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
}

.process-button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  transform: none;
}

.results-section {
  background: white;
  padding: 25px;
  border-radius: 15px;
  box-shadow: 0 5px 15px rgba(0,0,0,0.08);
}

.results-section h3 {
  margin: 0 0 20px 0;
  color: #374151;
  font-size: 1.3rem;
}

.processed-images {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 20px;
}

.processed-image {
  border: 1px solid #e5e7eb;
  border-radius: 10px;
  overflow: hidden;
  transition: transform 0.2s;
}

.processed-image:hover {
  transform: translateY(-2px);
  box-shadow: 0 5px 15px rgba(0,0,0,0.1);
}

.processed-image img {
  width: 100%;
  height: 200px;
  object-fit: cover;
  display: block;
}

.image-actions {
  padding: 15px;
  text-align: center;
}

.image-actions button {
  padding: 10px 20px;
  background: #10b981;
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: 500;
  transition: background 0.2s;
}

.image-actions button:hover {
  background: #059669;
}

/* Responsive design */
@media (max-width: 768px) {
  .image-processor {
    padding: 15px;
  }
  
  .header h1 {
    font-size: 2rem;
  }
  
  .config-grid {
    grid-template-columns: 1fr;
  }
  
  .drop-zone {
    padding: 40px 15px;
  }
  
  .upload-icon {
    font-size: 2.5rem;
  }
  
  .processed-images {
    grid-template-columns: 1fr;
  }
}
```

===============================================================================
                                KROK 3: POU≈ΩIT√ç V APLIKACI
===============================================================================

3. Importujte komponentu do va≈°√≠ hlavn√≠ aplikace:

```jsx
import React from 'react';
import ImageProcessor from './components/ImageProcessor';

function App() {
  return (
    <div className="App">
      <ImageProcessor />
    </div>
  );
}

export default App;
```

===============================================================================
                                KROK 4: TESTOV√ÅN√ç
===============================================================================

4. Otestujte integraci:

‚úÖ **Health check:** `https://web-production-dcb78.up.railway.app/api/health`
‚úÖ **Upload obr√°zku:** P≈ôet√°hnƒõte obr√°zek do drop z√≥ny
‚úÖ **Zpracov√°n√≠:** Kliknƒõte "Zpracovat obr√°zky"
‚úÖ **Sta≈æen√≠:** St√°hnƒõte zpracovan√Ω obr√°zek

===============================================================================
                                API ENDPOINTY
===============================================================================

üì° **Dostupn√© endpointy:**

1. **Health Check**
   - URL: `GET /api/health`
   - Popis: Kontrola stavu API

2. **Zpracov√°n√≠ jednoho obr√°zku**
   - URL: `POST /api/process-single`
   - Data: `FormData` s `image` a `config`

3. **Zpracov√°n√≠ v√≠ce obr√°zk≈Ø**
   - URL: `POST /api/process-batch`
   - Data: `FormData` s `images[]` a `config`

4. **Zpracov√°n√≠ base64 obr√°zku**
   - URL: `POST /api/process-base64`
   - Data: `JSON` s `image` (base64) a `config`

5. **Z√≠sk√°n√≠ konfigurace**
   - URL: `GET /api/config`
   - Popis: Vr√°t√≠ v√Ωchoz√≠ konfiguraci

6. **Aktualizace konfigurace**
   - URL: `POST /api/config`
   - Data: `JSON` s novou konfigurac√≠

===============================================================================
                                KONFIGURACE
===============================================================================

‚öôÔ∏è **Dostupn√© parametry:**

```json
{
  "target_width": 1000,        // C√≠lov√° ≈°√≠≈ôka v px
  "target_height": 1000,       // C√≠lov√° v√Ω≈°ka v px
  "quality": 95,               // Kvalita JPG (1-100)
  "background_color": "#F3F3F3", // Barva pozad√≠ (hex)
  "product_size_ratio": 0.75,  // Velikost produktu (0.1-1.0)
  "auto_upscale": false,       // Automatick√Ω upscale
  "white_threshold": 240,      // Prah pro b√≠l√© pixely
  "upscale_threshold": 800     // Prah pro upscale
}
```

===============================================================================
                                ≈òE≈†EN√ç PROBL√âM≈Æ
===============================================================================

üîß **ƒåast√© probl√©my:**

1. **CORS chyby**
   - ≈òe≈°en√≠: API m√° povolen√© CORS pro v≈°echny dom√©ny

2. **Velk√© soubory**
   - Limit: 16MB na soubor
   - ≈òe≈°en√≠: Zmen≈°ete obr√°zky p≈ôed uploadem

3. **Timeout chyby**
   - Limit: 120 sekund na zpracov√°n√≠
   - ≈òe≈°en√≠: Zmen≈°ete obr√°zky nebo poƒçet najednou

4. **API nedostupn√©**
   - Zkontrolujte: `https://web-production-dcb78.up.railway.app/api/health`
   - Railway m≈Ø≈æe m√≠t v√Ωpadky

===============================================================================
                                P≈ò√çKLADY POU≈ΩIT√ç
===============================================================================

üìù **JavaScript p≈ô√≠klady:**

```javascript
// Health check
const healthCheck = async () => {
  const response = await fetch('https://web-production-dcb78.up.railway.app/api/health');
  const data = await response.json();
  console.log(data); // {status: "ok", message: "...", version: "1.0.0"}
};

// Zpracov√°n√≠ jednoho obr√°zku
const processImage = async (file) => {
  const formData = new FormData();
  formData.append('image', file);
  formData.append('config', JSON.stringify({
    target_width: 1000,
    target_height: 1000,
    quality: 95
  }));

  const response = await fetch('https://web-production-dcb78.up.railway.app/api/process-single', {
    method: 'POST',
    body: formData
  });

  const blob = await response.blob();
  return blob;
};

// Z√≠sk√°n√≠ konfigurace
const getConfig = async () => {
  const response = await fetch('https://web-production-dcb78.up.railway.app/api/config');
  const config = await response.json();
  return config;
};
```

===============================================================================
                                BEZPEƒåNOST
===============================================================================

üîí **Bezpeƒçnostn√≠ doporuƒçen√≠:**

1. **Rate limiting** - API m√° z√°kladn√≠ ochranu
2. **File validation** - Kontrolujte typy soubor≈Ø
3. **Size limits** - Respektujte limity velikosti
4. **Error handling** - V≈ædy o≈°et≈ôujte chyby

===============================================================================
                                PODPORA
===============================================================================

üìû **Kontakt a podpora:**

- **API Status:** https://web-production-dcb78.up.railway.app/api/health
- **Railway Dashboard:** https://railway.app
- **GitHub Repository:** https://github.com/mwalo4/image-procesor

===============================================================================
                                Z√ÅVƒöR
===============================================================================

üéâ **Gratulujeme!** Va≈°e API je p≈ôipraven√© pro integraci.

‚úÖ **API bƒõ≈æ√≠:** https://web-production-dcb78.up.railway.app
‚úÖ **Health check:** OK
‚úÖ **Endpointy:** Funkƒçn√≠
‚úÖ **Dokumentace:** Kompletn√≠

**Nyn√≠ m≈Ø≈æete zpracov√°vat obr√°zky ve va≈°√≠ aplikaci!** üöÄ

=============================================================================== 